{{ if eq .Values.node.purpose "prep" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "statefulsetName" . }}
  labels:
{{ include "labels" . | indent 4 }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  revisionHistoryLimit: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
{{ include "selectorLabels" . | indent 6 }}
  serviceName: {{ include "statefulsetName" . }}
  template:
    metadata:
      {{- if .Values.deployment.annotations }}
      annotations:
{{ tpl .Values.deployment.annotations . | indent 8 }}
      {{- end }}
      labels:
{{ include "labels" . | indent 8 }}
    spec:
      {{- if .Values.deployment.tolerations }}
      tolerations:
{{ toYaml .Values.deployment.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.deployment.nodeSelector }}
      nodeSelector:
{{ .Values.deployment.nodeSelector | toYaml | indent 8 }}
      {{- end }}
      {{- if not .Values.node.certificate.autoGenerate}}
      volumes:
        - name: node-certificate
          secret:
            secretName: {{ include "certificate-name" .}}
      {{- end }}
      {{- if not .Values.node.runLocal }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        runAsNonRoot: true
      {{- end }}
      initContainers:
        {{- if .Values.node.runLocal }}
        - name: volume-mount-permissions-data
          image: busybox
          command: ["sh", "-c", "chown -R 1000:1000 /data"]
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
          volumeMounts:
            - name: data
              mountPath: /data
        {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image.repo }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - /src/entrypoint.sh
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
            capabilities:
              add:
                - SYS_TIME
          env:
            - name: EXT_IPADDR
              value: {{ .Values.node.extIPAddr }}
            - name: FASTEST_START
              value: {{ .Values.node.fastestStart }}
            - name: CERT_PATH
              value: /cert
            - name: ICON_LOG_LEVEL
              value: {{ .Values.node.iconLogLevel }}
            - name: LOOPCHAIN_LOG_LEVEL
              value: {{ .Values.node.loopchainLogLevel }}
            - name: NETWORK_ENV
              value: {{ .Values.node.networkEnvironment }}
            - name: ENDPOINT_URL
              value: {{ .Values.node.endpointURL }}
            - name: FIND_NEIGHBOR
              value: {{ .Values.node.findNeighbor | quote }}
            - name: FIND_NEIGHBOR_COUNT
              value: {{ .Values.node.findNeighborCount | quote}}
            - name: FIND_NEIGHBOR_OPTION
              value: {{ .Values.node.findNeighborOption }}
            - name: USE_NAT
              value: {{ .Values.node.useNAT | quote }}
            - name: AMQP_TARGET
              value: {{ .Values.node.amqpTarget | quote }}
            - name: USE_EXTERNAL_MQ
              value: {{ .Values.node.useExternalMQ | quote }}
            - name: AMQP_KEY
              value: {{ .Values.node.amqpKey }}
            - name: HEALTH_CHECK_INTERVAL
              value: {{ .Values.node.healthCheckInterval | quote }}
            - name: USE_SLACK
              value: {{ .Values.node.useSlack | quote }}
            - name: SLACK_URL
              value: {{ .Values.node.slackURL }}
            - name: SLACK_PREFIX
              value: {{ .Values.node.slackPrefix }}
            {{- if .Values.node.certificate.autoGenerate}}
            - name: IS_AUTOGEN_CERT
              value: "true"
            {{- end}}
            {{- if not .Values.node.certificate.autoGenerate }}
            - name: PRIVATE_KEY_FILENAME
              value: "cert.pem"
            - name: PRIVATE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "certificate-password" .}}
                  key: password
            {{- end }}
          ports:
            - containerPort: {{ .Values.node.ports.p2p }}
              name: grpc
            - containerPort: {{ .Values.node.ports.rpc }}
              name: json-rpc
          readinessProbe:
            failureThreshold: 100
            httpGet:
              path: /api/v1/status/peer
              port: json-rpc
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: {{ template "dataPVCName" . }}
              mountPath: /data
            {{- if .Values.node.certificate.autoGenerate }}
            - name: cert
              mountPath: /cert
            {{- else }}
            - name: node-certificate
              mountPath: /cert
              readOnly: true
            {{- end }}
          {{- if .Values.deployment.resources }}
          resources:
{{ toYaml .Values.deployment.resources | indent 12 }}
          {{- end }}
      {{- if eq .Values.deployment.storage.storageClassName "instance-nvme" }}
      volumes:
        - name: cert
          emptyDir: {}
      {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: {{ template "dataPVCName" . }}
      spec:
        accessModes: {{ .Values.deployment.storage.accessModes }}
        {{- if .Values.deployment.storage.storageClassName }}
        storageClassName: {{ .Values.deployment.storage.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.deployment.storage.dataSize }}
        selector:
          matchLabels:
{{ toYaml .Values.deployment.storage.selectorLabels | indent 12 }}
    {{- if ne .Values.deployment.storage.storageClassName "instance-nvme" }}
    - metadata:
        name: cert
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Mi
    {{- end }}
{{ end }}